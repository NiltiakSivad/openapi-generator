/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}

import type { Configuration } from "./configuration{{importFileExtension}}";
import type { RequestArgs } from "./base{{importFileExtension}}";
import type { AxiosInstance, AxiosResponse } from "axios";
import { RequiredError } from "./base{{importFileExtension}}";
{{#withNodeImports}}
import { URL, URLSearchParams } from 'url';
{{/withNodeImports}}
{{#withAWSV4Signature}}
import * as aws4 from 'aws4';
import { defaultProvider } from '@aws-sdk/credential-provider-node';
import { BASE_PATH } from './base';
{{/withAWSV4Signature}}

/**
 *
 * @export
 */
export const DUMMY_BASE_URL = 'https://example.com'

/**
 *
 * @throws {RequiredError}
 * @export
 */
export const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {
    if (paramValue === null || paramValue === undefined) {
        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
    }
}

/**
 *
 * @export
 */
export const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {
    if (configuration && configuration.apiKey) {
        const localVarApiKeyValue = typeof configuration.apiKey === 'function'
            ? await configuration.apiKey(keyParamName)
            : await configuration.apiKey;
        object[keyParamName] = localVarApiKeyValue;
    }
}

/**
 *
 * @export
 */
export const setBasicAuthToObject = function (object: any, configuration?: Configuration) {
    if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
    }
}

/**
 *
 * @export
 */
export const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const accessToken = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken()
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + accessToken;
    }
}

{{#withAWSV4Signature}}
/**
 * AWS V4 signature authentication
 * @throws {RequiredError}
 * @export
 */
export const setAwsSignatureToObject = async function (requestOptions: any, url: URL, configuration?: Configuration) {
    if (configuration?.awsv4) {
        try {
            let credentials;

            // Strategy 1: Use explicit credentials if provided (highest priority)
            if (configuration.awsv4.credentials?.accessKeyId &&
                configuration.awsv4.credentials?.secretAccessKey) {
                credentials = {
                    accessKeyId: configuration.awsv4.credentials.accessKeyId,
                    secretAccessKey: configuration.awsv4.credentials.secretAccessKey,
                    sessionToken: configuration.awsv4.credentials.sessionToken
                };
            } else {
                // Strategy 2: Use AWS SDK default provider chain
                // (handles env vars, profiles, IAM roles, etc. automatically)
                credentials = await defaultProvider()();
            }

            // Construct the real URL for signing (not the dummy URL)
            // Get the real base path from configuration or default BASE_PATH
            const realBasePath = configuration.basePath || BASE_PATH || '';
            let realUrl: URL;

            if (realBasePath) {
                // If we have a base path, construct the full URL
                const fullUrl = realBasePath.replace(/\/+$/, '') + url.pathname + url.search;
                realUrl = new URL(fullUrl);
            } else {
                // Fallback to the original URL (though this might still be dummy)
                realUrl = url;
            }

            // Handle AWS service-specific URL patterns
            let signingPath = realUrl.pathname + realUrl.search;

            // API Gateway stage handling
            if (configuration.awsv4.options?.stage) {
                const stage = configuration.awsv4.options.stage.startsWith('/')
                    ? configuration.awsv4.options.stage
                    : '/' + configuration.awsv4.options.stage;
                signingPath = stage + signingPath;
            }

            // Custom path prefix handling (alternative to stage)
            if (configuration.awsv4.options?.pathPrefix && !configuration.awsv4.options?.stage) {
                const prefix = configuration.awsv4.options.pathPrefix.startsWith('/')
                    ? configuration.awsv4.options.pathPrefix
                    : '/' + configuration.awsv4.options.pathPrefix;
                signingPath = prefix + signingPath;
            }

            // Create request object in format expected by aws4.sign()
            const requestToSign = {
                host: realUrl.host,
                path: signingPath,
                method: requestOptions.method?.toUpperCase() || 'GET',
                headers: { ...requestOptions.headers },
                body: requestOptions.data,
                service: configuration.awsv4.options?.service || 'execute-api',
                region: configuration.awsv4.options?.region || process.env.AWS_REGION || 'us-east-1'
            };

            // Sign the request
            const signedRequest = aws4.sign(requestToSign, credentials);

            // Apply signed headers to axios request
            if (signedRequest.headers) {
                requestOptions.headers = {
                    ...requestOptions.headers,
                    ...signedRequest.headers
                };
            }

        } catch (error) {
            console.warn('AWS credential resolution failed:', error);
            // Continue without signing - let the request proceed
        }
    }
}
{{/withAWSV4Signature}}

/**
 *
 * @export
 */
export const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {
    if (configuration && configuration.accessToken) {
        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
            ? await configuration.accessToken(name, scopes)
            : await configuration.accessToken;
        object["Authorization"] = "Bearer " + localVarAccessTokenValue;
    }
}

function setFlattenedQueryParams(urlSearchParams: URLSearchParams, parameter: any, key: string = ""): void {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            (parameter as any[]).forEach(item => setFlattenedQueryParams(urlSearchParams, item, key));
        }
        else {
            Object.keys(parameter).forEach(currentKey =>
                setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`)
            );
        }
    }
    else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        }
        else {
            urlSearchParams.set(key, parameter);
        }
    }
}

/**
 *
 * @export
 */
export const setSearchParams = function (url: URL, ...objects: any[]) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
}

/**
 *
 * @export
 */
export const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && configuration && configuration.isJsonMime
        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
        : nonString;
    return needsSerialization
        ? JSON.stringify(value !== undefined ? value : {})
        : (value || "");
}

/**
 *
 * @export
 */
export const toPathString = function (url: URL) {
    return url.pathname + url.search + url.hash
}

/**
 *
 * @export
 */
export const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {
    return <T = unknown, R = AxiosResponse<T>>(axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = {...axiosArgs.options, url: (axios.defaults.baseURL ? '' : configuration?.basePath ?? basePath) + axiosArgs.url};
        return axios.request<T, R>(axiosRequestArgs);
    };
}
